# bl-include.cfg - Variables and functions commonly used in custom scripts
# for Bunsen Labs Linux.
# Originally for CrunchBang GNU/Linux <http://crunchbanglinux.org/>.

# Can be used in user scripts too, by first including this file, eg:
# BL_COMMON_LIBDIR='/usr/lib/bunsen/bunsen-common'
# if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
#     echo $"Error: Failed to locate bl-include.cfg in $BL_COMMON_LIBDIR" >&2
#     exit 1
# fi



########################################################################
# Functions to generate Openbox menus.

menuStart() {
    echo '    <openbox_pipe_menu>'
}

# Usage: menuItem label command
menuItem() {
    echo "        <item label=\"$(OBlabelEscape "$(XMLescape "$1")")\">"
    echo '            <action name="Execute">'
    echo '                <command>'
    echo "                    $(XMLescape "$2")"
    echo '                </command>'
    echo '            </action>'
    echo '        </item>'
}

# Usage: menuSeparator [label]
menuSeparator() {
    if [[ $1 ]]; then
        echo "        <separator label=\"$(OBlabelEscape "$(XMLescape "$1")")\"/>"
    else
        echo '        <separator/>'
    fi
}

# Usage menuSubmenu id label # http://openbox.org/wiki/Help:Menus
menuSubmenu() {
    echo "    <menu id=\"$(XMLescape "$1")\" label=\"$(OBlabelEscape "$(XMLescape "$2")")\">"
}

menuSubmenuEnd() {
    echo '    </menu>'
}

menuEnd() {
    echo '    </openbox_pipe_menu>'
}

# escape special characters
XMLescape() {
    local string="${1//&/&amp;}"
    string="${string//</&lt;}"
    string="${string//>/&gt;}"
    string="${string//\"/&quot;}"
    string="${string//\'/&apos;}"
    printf '%s' "$string"
}
OBlabelEscape() {
    printf '%s' "${1//_/__}"
}

########################################################################

# rerun script in terminal if necessary
# Usage: terminalCheck [ -T title ] [arguments...]
terminalCheck() {
    if ! [[ -t 0 && -t 1 && -t 2 ]]; then # not attached to terminal
        if [[ -n $DISPLAY ]]; then # running X
            if [[ $1 = '-T' ]];then
                local title=$2
                shift 2
                x-terminal-emulator -T "$title" -e "$0" "$@"
            else
                x-terminal-emulator -e "$0" "$@"
            fi
        else
            echo "$0: no terminal" >&2
            exit 1
        fi
    fi
}

# Usage: createFlag filename
createFlag() {
    mkdir -p "$HOME/.config/bunsen"
    touch "$HOME/.config/bunsen/$1"
}

# Check the connection by downloading a file from ftp.debian.org. No disk space used.
# Usage: connectiontest [attempts]
# If attempt count is not specified or 0, then it will loop forever and exit(!) your main program with 1 exit status.
connectiontest() {
    local TEXT_CHECKING='Checking internet connection...'
    local TEXT_FAILED='Internet connection test failed!'
    local TEXT_ASK_RETRY=$'\n\nThis script requires a working internet connection. Please configure your internet connection, then hit "Enter" to continue, else hit "q" to quit.'
    local TEXT_ABORT='Script aborted.'
    local TEXT_OK='Internet connection test passed!'

    local -i i attempts=${1-0}
    for (( i=0; i < attempts || attempts == 0; i++ )); do
        say "$TEXT_CHECKING"
        if wget -O - 'http://ftp.debian.org/debian/README' &> /dev/null; then
            say "$TEXT_OK" 1
            return 0
        fi
        say "$TEXT_FAILED"
        if (( i == attempts - 1 )); then # if last attempt
            return 1
        elif prompt "$TEXT_ASK_RETRY" Q; then # if user wants to quit
            say "$TEXT_ABORT" 2
            (( attempts == 0 )) && exit 1 || return 1
        fi
        tput clear
    done
}

########################################################################
# User interface functions.

# Usage: say text [delayAfterText|pause]
say() {
    fold -s -w 76 <<< "$1" | sed 's/^/  /' # wraps text nicely and adds two leading spaces
    if [[ $2 = 'pause' ]]
    then
        echo 'Press any key to continue.'
        read -srn1
    else
        sleep "${2-0}"
    fi
}

# Usage errorExit message [details]
errorExit() {
    say $'\n'"$1"$'\n' '1' >&2
    [[ $2 ]] && {
        while true
        do
            read -rn1 -p '  Press "d" for details (q to quit) '
            [[ ${REPLY^} = Q ]] && exit 1
            [[ ${REPLY^} = D ]] && {
                echo $'\n\n'
                tput setaf 1
                echo "$2" >&2
                tput sgr0
                say "
Would you like to quit now, or continue anyway?
(Be careful!)
Press \"q\" to quit, \"c\" to continue:
"
                read -rn1
                [[ ${REPLY^} = Q ]] && exit 1
                [[ ${REPLY^} = C ]] && return 0
            }
        done
    }
    say 'Press any key to exit.'
    read -srn1
    exit 1
}

# Usage: prompt text [ Y | N | Q | <string> ]
prompt() {
    local answer prompt default
    if [[ ${2^} = Q ]]; then
        while true; do
            #say "$1"
            read -srn1 -p "$1" answer
            echo
            [[ ${answer^} = Q ]] && return 0
            [[ ! $answer ]] && return 1
        done
    fi

    if [[ ! $2 || ${2^} = Y ]]; then
        prompt='Y/n'
        default='Y'
    elif [[ ${2^} = N ]]; then
        prompt='y/N'
        default='N'
    else
        prompt=
        default=
    fi

    while true; do
        read -r -p "$1 ${prompt:+[$prompt] }" answer

        if [[ ! $prompt && ! $default ]]; then
            if [[ $answer = $2 ]]; then
                say
                return 0
            elif [[ ${answer^} = Q ]]; then
                return 1
            else
                continue
            fi
        fi

        [[ ! $answer ]] &&
            answer=$default

        if [[ ${answer^} = Y || ${answer^^} = YES ]]; then
            echo
            return 0
        elif [[ ${answer^} = N || ${answer^^} = NO ]]; then
            echo
            return 1
        fi
    done
}

# Usage: promptInstall [--apt-get-option] title description package...
# Use: promptInstall [--apt-get-option] --setup functionname title desc...
# to have functionname run first
promptInstall() {
    unset arg
    if [[ $1 = -* ]]; then
        arg=$1
        shift
    fi
    local setupFunction=
    if [[ $1 = '--setup' ]]; then
        if [[ -n $2 && $(type -t "$2") = 'function'  ]]; then
            setupFunction="$2"
            shift 2
        else
            say "Error: $2 is not a function."
            return 1
        fi
    fi
    local TRYAGAIN=false
    while true; do # Repeat until there are no errors
        if $TRYAGAIN; then # previous try failed
            say
            say "There was a problem installing ${2,,}."
            say
            prompt '  Hit any key to try again, or "q" to quit...' Q && return 1
        fi
        local TRYAGAIN=true

        tput clear
        say
        say "INSTALL ${1^^}"
        say '------------------------'
        say "This script will install ${2,,}."
        say
        prompt '  Run the installer now?' || return 0

        tput clear
        connectiontest || continue

        if [[ -n $setupFunction ]]; then
            "$setupFunction" || continue # run setup function if it exists
        fi

        tput clear
        say 'Updating sources...' 1
        safeUpdate || say 'Continuing in spite of update problems...' 3

        tput clear
        say 'Installing package...' 1
        safeInstall $arg "${@:3}" || continue

        tput clear
        say
        say "${2^} has been installed successfully."
        say
        say 'Hit any key to exit...'
        read -srn1
        return 0
    done
}

########################################################################
# Apt-get functions.

# apt-get update, exit if error message.
safeUpdate() {
    say 'updating apt...'
    if apt_error=$(LC_MESSAGES=C sudo apt-get update 2>&1 >/dev/tty) && [[ -z $apt_error ]]
    then
        say 'Finished update'
        return 0
    else
        errorExit 'There were problems during the update.' "$apt_error"
        return 1
    fi
}

# apt-get upgrade, exit if error message.
safeUpgrade() {
    say 'upgrading apt...'
    ignore_string1='Extracting templates from packages: 100%' # apt sends this to stderr!
    ignore_string2='Retrieving bug reports... Done' # apt-listbugs sends this to stderr!
    ignore_string3='Parsing Found/Fixed information... Done' # apt-listbugs sends this to stderr!
    if apt_error=$(LC_MESSAGES=C sudo apt-get upgrade 2>&1 >/dev/tty) &&  ! grep -iqEv "(${ignore_string1}|${ignore_string2}|${ignore_string3}|^$)" <<<"$apt_error"
    then
        say 'Finished upgrade.'
        return 0
    else
        errorExit 'There were problems during the upgrade.' "${apt_error:-Upgrade Aborted}"
        return 1
    fi
}

# Usage safeInstall [--apt-get-option] package [package...]
safeInstall() {
    unset arg
    [[ $1 = -* ]] && {
        arg=$1
        shift
    }
    ignore_string1='Extracting templates from packages: 100%' # apt sends this to stderr!
    ignore_string2='Retrieving bug reports... Done' # apt-listbugs sends this to stderr!
    ignore_string3='Parsing Found/Fixed information... Done' # apt-listbugs sends this to stderr!
    if apt_error=$(LC_MESSAGES=C sudo apt-get install $arg "${@}" 2>&1 >/dev/tty) && ! grep -iqEv "(${ignore_string1}|${ignore_string2}|${ignore_string3}|^$)" <<<"$apt_error"
    then
        say 'Installation finished sucessfully.'
        return 0
    else
        errorExit "There were problems installing ${*}" "${apt_error:-Install Aborted}"
        return 1
    fi
}
