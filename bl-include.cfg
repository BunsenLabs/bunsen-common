# bl-include.cfg - Variables and functions commonly used in custom scripts
# for Bunsen Labs Linux.
# Originally for CrunchBang GNU/Linux <http://crunchbanglinux.org/>.

# Usage: createFlag filename
createFlag() {
    mkdir -p "$HOME/.config/bunsen"
    touch "$HOME/.config/bunsen/$1"
}

# Usage: say text [delayAfterText|pause]
say() {
    fold -s -w 76 <<< "$1" | sed 's/^/  /' # wraps text nicely and adds two leading spaces
    if [[ $2 = 'pause' ]]
    then
        echo 'Press any key to continue.'
        read -srn1
    else
        sleep "${2-0}"
    fi
}

# Usage errorExit message [details]
errorExit() {
    say $'\n'"$1"$'\n' '1' >&2
    [[ $2 ]] && {
        while true; do
            read -rn1 -p '  Press "d" for details (q to quit) '
            [[ ${REPLY^} = Q ]] && exit 1
            [[ ${REPLY^} = D ]] && {
                echo $'\n\n'"$2"$'\n' >&2
                say "Would you like to quit now, or continue anyway?
(Be careful!)"$'\n'
                read -r -p '  "q" to quit, "c" to continue '
                [[ ${REPLY^} = Q ]] && exit 1
                [[ ${REPLY^} = C ]] && return 0
            }
        done
    }
    say 'Press any key to exit.'
    read -srn1
    exit 1
}

# Usage errorReturn message [details]
errorReturn() {
    say $'\n'"$1"$'\n' '1' >&2
    [[ $2 ]] && {
        say 'Press "d" for details, any other key to pass.'
        read -rn1
        [[ ${REPLY^} = D ]] && {
            echo $'\n\n'"$2"$'\n' >&2
        }
    }
    say "Would you like to quit now, go on to the next item or continue anyway?
(Be careful!)"$'\n'
    while true; do
        read -r -p '  "q" to quit, "n" for next, "c" to continue: '
        [[ ${REPLY^} = Q ]] && exit 1
        [[ ${REPLY^} = N ]] && return 1
        [[ ${REPLY^} = C ]] && return 0
    done
}

# Usage: prompt text [ Y | N | Q | <string> ]
prompt() {
    local answer prompt default
    if [[ ${2^} = Q ]]; then
        while true; do
            #say "$1"
            read -srn1 -p "$1" answer
            echo
            [[ ${answer^} = Q ]] && return 0
            [[ ! $answer ]] && return 1
        done
    fi

    if [[ ! $2 || ${2^} = Y ]]; then
        prompt='Y/n'
        default='Y'
    elif [[ ${2^} = N ]]; then
        prompt='y/N'
        default='N'
    else
        prompt=
        default=
    fi

    while true; do
        read -r -p "$1 ${prompt:+[$prompt] }" answer

        if [[ ! $prompt && ! $default ]]; then
            if [[ $answer = $2 ]]; then
                say
                return 0
            elif [[ ${answer^} = Q ]]; then
                return 1
            else
                continue
            fi
        fi

        [[ ! $answer ]] &&
            answer=$default

        if [[ ${answer^} = Y || ${answer^^} = YES ]]; then
            echo
            return 0
        elif [[ ${answer^} = N || ${answer^^} = NO ]]; then
            echo
            return 1
        fi
    done
}

# Check the connection by downloading a file from ftp.debian.org. No disk space used.
# Usage: connectiontest [attempts]
# If attempt count is not specified or 0, then it will loop forever and exit(!) your main program with 1 exit status.
connectiontest() {
    local TEXT_CHECKING='Checking internet connection...'
    local TEXT_FAILED='Internet connection test failed!'
    local TEXT_ASK_RETRY=$'\n\nThis script requires a working internet connection. Please configure your internet connection, then hit "Enter" to continue, else hit "q" to quit.'
    local TEXT_ABORT='Script aborted.'
    local TEXT_OK='Internet connection test passed!'

    local -i i attempts=${1-0}
    for (( i=0; i < attempts || attempts == 0; i++ )); do
        say "$TEXT_CHECKING"
        if wget -O - 'http://ftp.debian.org/debian/README' &> /dev/null; then
            say "$TEXT_OK" 1
            return 0
        fi
        say "$TEXT_FAILED"
        if (( i == attempts - 1 )); then # if last attempt
            return 1
        elif prompt "$TEXT_ASK_RETRY" Q; then # if user wants to quit
            say "$TEXT_ABORT" 2
            (( attempts == 0 )) && exit 1 || return 1
        fi
        clear
    done
}

# may be necessary in the future
XMLescape() {
    case "$1" in
    *\&*|*\<*|*\>*|*\"*|*\'*) :;;
    *) printf '%s' "$1"; return;; # only escape if necessary
    esac
    local string="${1//&/&amp;}"
    string="${string//</&lt;}"
    string="${string//>/&gt;}"
    string="${string//\"/&quot;}"
    string="${string//\'/&apos;}"
    printf '%s' "$string"
}

OBlabelEscape() {
    case "$1" in
    *_*) :;;
    *) printf '%s' "$1"; return;;
    esac
    printf '%s' "${1//_/__}"
}

menuStart() {
    echo '    <openbox_pipe_menu>'
}

# Usage: menuItem label command
menuItem() {
    echo "        <item label=\"$(OBlabelEscape "$(XMLescape "$1")")\">"
    echo '            <action name="Execute">'
    echo '                <command>'
    echo "                    $(XMLescape "$2")"
    echo '                </command>'
    echo '            </action>'
    echo '        </item>'
}

# Usage: menuSeparator [label]
menuSeparator() {
    if [[ $1 ]]; then
        echo "        <separator label=\"$(OBlabelEscape "$(XMLescape "$1")")\"/>"
    else
        echo '        <separator/>'
    fi
}

# Usage menuSubmenu id label # http://openbox.org/wiki/Help:Menus
menuSubmenu() {
    echo "    <menu id=\"$(XMLescape "$1")\" label=\"$(OBlabelEscape "$(XMLescape "$2")")\">"
}

menuSubmenuEnd() {
    echo '    </menu>'
}

menuEnd() {
    echo '    </openbox_pipe_menu>'
}

# Usage: promptInstall title description package...
# Use: promptInstall --setup functionname title desc...
# to have functionname run first
promptInstall() {
    local setupFunction=
    if [[ $1 = '--setup' ]]; then
        if [[ -n $2 && $(type -t "$2") = 'function'  ]]; then
            setupFunction="$2"
            shift 2
        else
            say "Error: $2 is not a function."
            return 1
        fi
    fi
    local TRYAGAIN=false
    while true; do # Repeat until there are no errors
        if $TRYAGAIN; then # previous try failed
            say
            say "There was a problem installing ${2,,}."
            say
            prompt '  Hit any key to try again, or "q" to quit...' Q && return 1
        fi
        local TRYAGAIN=true

        clear
        say
        say "INSTALL ${1^^}"
        say '------------------------'
        say "This script will install ${2,,}."
        say
        prompt '  Run the installer now?' || return 0

        clear
        connectiontest || continue

        if [[ -n $setupFunction ]]; then
            "$setupFunction" || continue # run setup function if it exists
        fi

        clear
        say 'Updating sources...' 1
        sudo apt-get update

        clear
        say 'Installing package...' 1
        sudo apt-get install -y "${@:3}" || continue

        clear
        say
        say "${2^} has been installed successfully."
        say
        say 'Hit any key to exit...'
        read -srn1
        return 0
    done
}
